digraph G {
  graph [ ratio = "auto", page = "100", compound =true, bgcolor = "#2e3e56" ];
  node [ style = "filled", fillcolor = "#edad56", color = "#edad56", penwidth =3 ];
  edge [ color = "#fcfcfc", penwidth =2, fontname = "helvetica Neue Ultra Light" ];
subgraph "clusterdAgoraBridge" {
  graph [ label = "dAgoraBridge", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "dAgoraBridge.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "dAgoraBridge.isPaused" [ label = "isPaused", color = "#1bc6a6", shape =doubleoctagon ];
  "dAgoraBridge.Deposit" [ label = "Deposit", color = "brown", fillcolor = "#FF9797" ];
  "dAgoraBridge.withdraw" [ label = "withdraw", color = "brown", fillcolor = "#FF9797" ];
  "dAgoraBridge.pause" [ label = "pause", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraBridge.unPause" [ label = "unPause", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraBridge.setNewBridgeFees" [ label = "setNewBridgeFees", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraBridge.getCurrentNonce" [ label = "getCurrentNonce", color = "#FF9797", fillcolor = "#FF9797" ];
  "dAgoraBridge.prefixed" [ label = "prefixed" ];
  "dAgoraBridge.recoverSigner" [ label = "recoverSigner" ];
  "dAgoraBridge.splitSignature" [ label = "splitSignature" ];
}

subgraph "clusterOwnable" {
  graph [ label = "Ownable", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Ownable.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "Ownable.owner" [ label = "owner" ];
  "Ownable.onlyOwner" [ label = "onlyOwner", color = "#1bc6a6", shape =doubleoctagon ];
  "Ownable.renounceOwnership" [ label = "renounceOwnership", color = "#FF9797", fillcolor = "#FF9797" ];
  "Ownable.transferOwnership" [ label = "transferOwnership", color = "#FF9797", fillcolor = "#FF9797" ];
  "Ownable._transferOwnership" [ label = "_transferOwnership" ];
  "Ownable._msgSender" [ label = "_msgSender" ];
}

subgraph "clusterContext" {
  graph [ label = "Context", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Context._msgSender" [ label = "_msgSender", color = "#f2c383", fillcolor = "#f2c383" ];
  "Context._msgData" [ label = "_msgData", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterERC20" {
  graph [ label = "ERC20", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ERC20.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.name" [ label = "name", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.symbol" [ label = "symbol", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.decimals" [ label = "decimals", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.totalSupply" [ label = "totalSupply", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.balanceOf" [ label = "balanceOf", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.transfer" [ label = "transfer", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.allowance" [ label = "allowance" ];
  "ERC20.approve" [ label = "approve", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.transferFrom" [ label = "transferFrom", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.increaseAllowance" [ label = "increaseAllowance", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20.decreaseAllowance" [ label = "decreaseAllowance", color = "#FF9797", fillcolor = "#FF9797" ];
  "ERC20._transfer" [ label = "_transfer" ];
  "ERC20._mint" [ label = "_mint", color = "#f2c383", fillcolor = "#f2c383" ];
  "ERC20._burn" [ label = "_burn", color = "#f2c383", fillcolor = "#f2c383" ];
  "ERC20._approve" [ label = "_approve" ];
  "ERC20._spendAllowance" [ label = "_spendAllowance" ];
  "ERC20._beforeTokenTransfer" [ label = "_beforeTokenTransfer" ];
  "ERC20._afterTokenTransfer" [ label = "_afterTokenTransfer" ];
  "ERC20._msgSender" [ label = "_msgSender" ];
  "ERC20.type" [ label = "type" ];
}

subgraph "clusterIERC20" {
  graph [ label = "IERC20  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IERC20.totalSupply" [ label = "totalSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20.balanceOf" [ label = "balanceOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20.transfer" [ label = "transfer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20.allowance" [ label = "allowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20.approve" [ label = "approve", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20.transferFrom" [ label = "transferFrom", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIERC20Metadata" {
  graph [ label = "IERC20Metadata  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IERC20Metadata.name" [ label = "name", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20Metadata.symbol" [ label = "symbol", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20Metadata.decimals" [ label = "decimals", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterReentrancyGuard" {
  graph [ label = "ReentrancyGuard", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ReentrancyGuard.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "ReentrancyGuard.nonReentrant" [ label = "nonReentrant", color = "#1bc6a6", shape =doubleoctagon ];
}

subgraph "clusterdAgoraVault" {
  graph [ label = "dAgoraVault", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "dAgoraVault.Deposit" [ label = "Deposit", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraVault._isDepositedToVault" [ label = "_isDepositedToVault", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraVault.Withdraw" [ label = "Withdraw", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Ownable.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "dAgoraVault.checkDepositId" [ label = "checkDepositId" ];
}

subgraph "clusterEnumerableSet" {
  graph [ label = "EnumerableSet  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "EnumerableSet._add" [ label = "_add", color = "#edad56", fillcolor = "#edad56" ];
  "EnumerableSet._remove" [ label = "_remove" ];
  "EnumerableSet._contains" [ label = "_contains" ];
  "EnumerableSet._length" [ label = "_length" ];
  "EnumerableSet._at" [ label = "_at" ];
  "EnumerableSet._values" [ label = "_values" ];
  "EnumerableSet.add" [ label = "add", color = "#f2c383", fillcolor = "#f2c383" ];
  "EnumerableSet.remove" [ label = "remove", color = "#f2c383", fillcolor = "#f2c383" ];
  "EnumerableSet.contains" [ label = "contains", color = "#f2c383", fillcolor = "#f2c383" ];
  "EnumerableSet.length" [ label = "length", color = "#f2c383", fillcolor = "#f2c383" ];
  "EnumerableSet.at" [ label = "at", color = "#f2c383", fillcolor = "#f2c383" ];
  "EnumerableSet.values" [ label = "values", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterdAgoraFactory" {
  graph [ label = "dAgoraFactory", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "dAgoraFactory.isdAgoraToken" [ label = "isdAgoraToken", color = "#FF9797", fillcolor = "#FF9797" ];
  "dAgoraFactory.WrapBurn" [ label = "WrapBurn", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraFactory.WrapMint" [ label = "WrapMint", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraFactory._createdAgoraToken" [ label = "_createdAgoraToken" ];
  "dAgoraFactory.getdAgoraToken" [ label = "getdAgoraToken" ];
  "dAgoraFactory.getNameForWrappedToken" [ label = "getNameForWrappedToken" ];
  "dAgoraFactory.getSymbolForWrappedToken" [ label = "getSymbolForWrappedToken" ];
}

subgraph "clusterStrings" {
  graph [ label = "Strings  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Strings.toString" [ label = "toString", color = "#f2c383", fillcolor = "#f2c383" ];
  "Strings.toHexString" [ label = "toHexString" ];
}

subgraph "clusterdAgoraToken" {
  graph [ label = "dAgoraToken", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "dAgoraToken.WrapMint" [ label = "WrapMint", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraToken.WrapBurn" [ label = "WrapBurn", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "dAgoraToken.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "dAgoraToken.onlyBridge" [ label = "onlyBridge", color = "#1bc6a6", shape =doubleoctagon ];
}

  "dAgoraBridge.Deposit";
  "dAgoraBridge.prefixed";
  "dAgoraBridge.recoverSigner";
  "dAgoraFactory.isdAgoraToken";
  "dAgoraFactory.WrapBurn";
  "dAgoraVault.Deposit";
  "dAgoraBridge.withdraw";
  "dAgoraVault._isDepositedToVault";
  "dAgoraVault.Withdraw";
  "dAgoraFactory.WrapMint";
  "dAgoraBridge.splitSignature";
  "Ownable.<Constructor>";
  "Ownable._transferOwnership";
  "Ownable._msgSender";
  "Ownable.onlyOwner";
  "Ownable.owner";
  "Ownable.renounceOwnership";
  "Ownable.transferOwnership";
  "ERC20.transfer";
  "ERC20._msgSender";
  "ERC20._transfer";
  "ERC20.approve";
  "ERC20._approve";
  "ERC20.transferFrom";
  "ERC20._spendAllowance";
  "ERC20.increaseAllowance";
  "ERC20.allowance";
  "ERC20.decreaseAllowance";
  "ERC20._beforeTokenTransfer";
  "ERC20._afterTokenTransfer";
  "ERC20._mint";
  "ERC20._burn";
  "ERC20.type";
  "dAgoraVault.checkDepositId";
  "EnumerableSet._add";
  "EnumerableSet._contains";
  "EnumerableSet.add";
  "EnumerableSet.remove";
  "EnumerableSet._remove";
  "EnumerableSet.contains";
  "EnumerableSet.length";
  "EnumerableSet._length";
  "EnumerableSet.at";
  "EnumerableSet._at";
  "EnumerableSet.values";
  "EnumerableSet._values";
  "dAgoraFactory._createdAgoraToken";
  "dAgoraToken.WrapMint";
  "dAgoraToken.WrapBurn";
  "dAgoraFactory.getdAgoraToken";
  "dAgoraFactory.getNameForWrappedToken";
  "dAgoraFactory.getSymbolForWrappedToken";
  "Strings.toHexString";
  "dAgoraBridge.Deposit" -> "dAgoraBridge.prefixed" [ color = "#1bc6a6" ];
  "dAgoraBridge.Deposit" -> "dAgoraBridge.recoverSigner" [ color = "#1bc6a6" ];
  "dAgoraBridge.Deposit" -> "dAgoraFactory.isdAgoraToken" [ color = "white" ];
  "dAgoraBridge.Deposit" -> "dAgoraFactory.WrapBurn" [ color = "white" ];
  "dAgoraBridge.Deposit" -> "dAgoraVault.Deposit" [ color = "white" ];
  "dAgoraBridge.withdraw" -> "dAgoraBridge.prefixed" [ color = "#1bc6a6" ];
  "dAgoraBridge.withdraw" -> "dAgoraBridge.recoverSigner" [ color = "#1bc6a6" ];
  "dAgoraBridge.withdraw" -> "dAgoraVault._isDepositedToVault" [ color = "white" ];
  "dAgoraBridge.withdraw" -> "dAgoraVault.Withdraw" [ color = "white" ];
  "dAgoraBridge.withdraw" -> "dAgoraFactory.WrapMint" [ color = "white" ];
  "dAgoraBridge.recoverSigner" -> "dAgoraBridge.splitSignature" [ color = "#1bc6a6" ];
  "Ownable.<Constructor>" -> "Ownable._transferOwnership" [ color = "#1bc6a6" ];
  "Ownable.<Constructor>" -> "Ownable._msgSender" [ color = "#1bc6a6" ];
  "Ownable.onlyOwner" -> "Ownable.owner" [ color = "#1bc6a6" ];
  "Ownable.onlyOwner" -> "Ownable._msgSender" [ color = "#1bc6a6" ];
  "Ownable.renounceOwnership" -> "Ownable._transferOwnership" [ color = "#1bc6a6" ];
  "Ownable.transferOwnership" -> "Ownable._transferOwnership" [ color = "#1bc6a6" ];
  "ERC20.transfer" -> "ERC20._msgSender" [ color = "#1bc6a6" ];
  "ERC20.transfer" -> "ERC20._transfer" [ color = "#1bc6a6" ];
  "ERC20.approve" -> "ERC20._msgSender" [ color = "#1bc6a6" ];
  "ERC20.approve" -> "ERC20._approve" [ color = "#1bc6a6" ];
  "ERC20.transferFrom" -> "ERC20._msgSender" [ color = "#1bc6a6" ];
  "ERC20.transferFrom" -> "ERC20._spendAllowance" [ color = "#1bc6a6" ];
  "ERC20.transferFrom" -> "ERC20._transfer" [ color = "#1bc6a6" ];
  "ERC20.increaseAllowance" -> "ERC20._msgSender" [ color = "#1bc6a6" ];
  "ERC20.increaseAllowance" -> "ERC20._approve" [ color = "#1bc6a6" ];
  "ERC20.increaseAllowance" -> "ERC20.allowance" [ color = "#1bc6a6" ];
  "ERC20.decreaseAllowance" -> "ERC20._msgSender" [ color = "#1bc6a6" ];
  "ERC20.decreaseAllowance" -> "ERC20.allowance" [ color = "#1bc6a6" ];
  "ERC20.decreaseAllowance" -> "ERC20._approve" [ color = "#1bc6a6" ];
  "ERC20._transfer" -> "ERC20._beforeTokenTransfer" [ color = "#1bc6a6" ];
  "ERC20._transfer" -> "ERC20._afterTokenTransfer" [ color = "#1bc6a6" ];
  "ERC20._mint" -> "ERC20._beforeTokenTransfer" [ color = "#1bc6a6" ];
  "ERC20._mint" -> "ERC20._afterTokenTransfer" [ color = "#1bc6a6" ];
  "ERC20._burn" -> "ERC20._beforeTokenTransfer" [ color = "#1bc6a6" ];
  "ERC20._burn" -> "ERC20._afterTokenTransfer" [ color = "#1bc6a6" ];
  "ERC20._spendAllowance" -> "ERC20.allowance" [ color = "#1bc6a6" ];
  "ERC20._spendAllowance" -> "ERC20.type" [ color = "#1bc6a6" ];
  "ERC20._spendAllowance" -> "ERC20._approve" [ color = "#1bc6a6" ];
  "dAgoraVault.Deposit" -> "dAgoraVault.checkDepositId" [ color = "#1bc6a6" ];
  "dAgoraVault.Deposit" -> "ERC20.transferFrom" [ color = "white" ];
  "dAgoraVault.Withdraw" -> "dAgoraVault.checkDepositId" [ color = "#1bc6a6" ];
  "dAgoraVault.Withdraw" -> "ERC20.transfer" [ color = "white" ];
  "EnumerableSet._add" -> "EnumerableSet._contains" [ color = "#1bc6a6" ];
  "EnumerableSet.add" -> "EnumerableSet._add" [ color = "#1bc6a6" ];
  "EnumerableSet.remove" -> "EnumerableSet._remove" [ color = "#1bc6a6" ];
  "EnumerableSet.contains" -> "EnumerableSet._contains" [ color = "#1bc6a6" ];
  "EnumerableSet.length" -> "EnumerableSet._length" [ color = "#1bc6a6" ];
  "EnumerableSet.at" -> "EnumerableSet._at" [ color = "#1bc6a6" ];
  "EnumerableSet.values" -> "EnumerableSet._values" [ color = "#1bc6a6" ];
  "EnumerableSet.add" -> "EnumerableSet._add" [ color = "#1bc6a6" ];
  "EnumerableSet.remove" -> "EnumerableSet._remove" [ color = "#1bc6a6" ];
  "EnumerableSet.contains" -> "EnumerableSet._contains" [ color = "#1bc6a6" ];
  "EnumerableSet.length" -> "EnumerableSet._length" [ color = "#1bc6a6" ];
  "EnumerableSet.at" -> "EnumerableSet._at" [ color = "#1bc6a6" ];
  "EnumerableSet.values" -> "EnumerableSet._values" [ color = "#1bc6a6" ];
  "EnumerableSet.add" -> "EnumerableSet._add" [ color = "#1bc6a6" ];
  "EnumerableSet.remove" -> "EnumerableSet._remove" [ color = "#1bc6a6" ];
  "EnumerableSet.contains" -> "EnumerableSet._contains" [ color = "#1bc6a6" ];
  "EnumerableSet.length" -> "EnumerableSet._length" [ color = "#1bc6a6" ];
  "EnumerableSet.at" -> "EnumerableSet._at" [ color = "#1bc6a6" ];
  "EnumerableSet.values" -> "EnumerableSet._values" [ color = "#1bc6a6" ];
  "dAgoraFactory.WrapMint" -> "dAgoraFactory.isdAgoraToken" [ color = "#1bc6a6" ];
  "dAgoraFactory.WrapMint" -> "dAgoraFactory._createdAgoraToken" [ color = "#1bc6a6" ];
  "dAgoraFactory.WrapMint" -> "dAgoraToken.WrapMint" [ color = "white" ];
  "dAgoraFactory.WrapBurn" -> "dAgoraFactory.isdAgoraToken" [ color = "#1bc6a6" ];
  "dAgoraFactory.WrapBurn" -> "dAgoraToken.WrapBurn" [ color = "white" ];
  "dAgoraFactory._createdAgoraToken" -> "dAgoraFactory.getdAgoraToken" [ color = "#1bc6a6" ];
  "dAgoraFactory._createdAgoraToken" -> "dAgoraFactory.getNameForWrappedToken" [ color = "#1bc6a6" ];
  "dAgoraFactory._createdAgoraToken" -> "dAgoraFactory.getSymbolForWrappedToken" [ color = "#1bc6a6" ];
  "Strings.toHexString" -> "Strings.toHexString" [ color = "#1bc6a6" ];
  "dAgoraToken.WrapMint" -> "ERC20._mint" [ color = "#1bc6a6" ];
  "dAgoraToken.WrapBurn" -> "ERC20._burn" [ color = "#1bc6a6" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="#445773">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="#e8726d">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="#1bc6a6"]
key:i2:e -> key2:i2:w [color="white"]
}
}
